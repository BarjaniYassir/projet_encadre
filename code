#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure du produit
typedef struct {
    int ID;
    char Nom[30];
    char Description[100];
    char Username[30];
    float PrixUnitaire;
    int QuantiteStock;
    int SeuilAlerte;
    char dateE[10];
    char dateS[10];
} Produit;

// Fonction pour entrer le nom
void EntrerNom(char Nom[30]){
    printf("VEUILLEZ SAISIR VOTRE NOM: \n");
    scanf("%s",Nom);
}

// Fonction pour ajouter un produit
void AjoutProduit(FILE *file, Produit *prod, int *NombreProduit){
    Produit NvProduit;
    NvProduit.ID = *NombreProduit + 1;

    printf("Saisissez le nom du produit : ");
    scanf("%s", NvProduit.Nom);
    printf("Saisissez la description du produit : ");
    scanf("%s", NvProduit.Description);
    printf("Saisissez votre nom d'utilisateur : ");
    scanf("%s", NvProduit.Username);
    printf("Saisissez le prix unitaire du produit : ");
    scanf("%f", &NvProduit.PrixUnitaire); 
    printf("Saisissez la quantité en stock du produit : ");
    scanf("%d", &NvProduit.QuantiteStock);
    printf("Saisissez le seuil d'alerte du stock : ");
    scanf("%d", &NvProduit.SeuilAlerte);
    printf("Saisissez la date d'entrée du produit : ");
    scanf("%s", NvProduit.dateE);
    printf("Saisissez la date de sortie du produit  : ");
    scanf("%s", NvProduit.dateS);

    fprintf(file, "%d %s %s %s %.2f %d %d %s %s\n", NvProduit.ID, NvProduit.Nom, NvProduit.Description,
            NvProduit.Username, NvProduit.PrixUnitaire, NvProduit.QuantiteStock, NvProduit.SeuilAlerte,
            NvProduit.dateE, NvProduit.dateS);
    
    (*NombreProduit)++;
    printf("Produit ajouté avec succès !\n");
}

// Fonction pour afficher les produits
void AfficherProduits(FILE *file) {
    Produit prod;

    printf("Liste des produits:\n");

    rewind(file); 

    while (fscanf(file, "%d %s %s %s %f %d %d %s %s", &prod.ID, prod.Nom, prod.Description,
                  prod.Username, &prod.PrixUnitaire, &prod.QuantiteStock, &prod.SeuilAlerte,
                  prod.dateE, prod.dateS) == 9) {
        printf("ID: %d\n", prod.ID);
        printf("Nom: %s\n", prod.Nom);
        printf("Description: %s\n", prod.Description);
        printf("Username: %s\n", prod.Username);
        printf("Prix Unitaire: %.2f\n", prod.PrixUnitaire);
        printf("Quantité Stock: %d\n", prod.QuantiteStock);
        printf("Seuil d'Alerte: %d\n", prod.SeuilAlerte);
        printf("Date D'Entrée: %s\n", prod.dateE);
        printf("Date De Sortie: %s\n", prod.dateS);
        printf("\n");
    }
}

// Fonction pour supprimer un produit
void SupprimerProduit(Produit *prod, int *NombreProduit) {
    char nomSupp[30];
    int i, pos = -1;

    printf("Entrez le nom du produit à supprimer : ");
    scanf("%s", nomSupp);

    for (i = 0; i < *NombreProduit; i++) {
        if (strcmp(prod[i].Nom, nomSupp) == 0) {
            pos = i;
            break;
        }
    }

    if (pos != -1) {
        for (i = pos; i < *NombreProduit - 1; i++) {
            prod[i] = prod[i + 1];
        }
        (*NombreProduit)--;
        printf("Produit avec le nom '%s' supprimé avec succès.\n", nomSupp);
    } else {
        printf("Aucun produit trouvé avec le nom fourni.\n");
    }
}

// Fonction pour modifier un produit
void ModifierProduit(Produit *prod, int *NombreProduit, int ID) {
    int i, choix, IDtrouver = 0;
    Produit NvProduit;
    
    printf("VEUILLEZ SAISIR L'ID du produit à modifier: \n");
    scanf("%d", &ID);
    
    for (i = 0; i < *NombreProduit; i++) {
        if (prod[i].ID == ID) {
            IDtrouver = 1;
            printf("Le produit a été trouvé.\n");
            printf("Veuillez saisir les nouvelles informations:\n");
            printf("1. Nom\n");
            printf("2. Description\n");
            printf("3. Username\n");
            printf("4. Prix Unitaire\n");
            printf("5. QuantiteStock\n");
            printf("6. SeuilAlerte\n");
            printf("7. Date entree\n");
            printf("8. Date sortie\n");
            scanf("%d", &choix);
            
            switch (choix) {
                case 1:
                    printf("Entrez le nouveau Nom:\n");
                    scanf("%s", NvProduit.Nom);
                    break;
                case 2:
                    printf("Entrez la nouvelle Description du produit:\n");
                    scanf("%s", NvProduit.Description);
                    break;
                case 3:
                    printf("Entrez le nouveau Username:\n");
                    scanf("%s", NvProduit.Username);
                    break;
                case 4:
                    printf("Entrez le nouveau Prix Unitaire:\n");
                    scanf("%f", &NvProduit.PrixUnitaire);
                    break;
                case 5:
                    printf("Entrez la nouvelle Quantité de Stock:\n");
                    scanf("%d", &NvProduit.QuantiteStock);
                    break;
                case 6:
                    printf("Entrez le nouveau Seuil d'Alerte de Stock:\n");
                    scanf("%d", &NvProduit.SeuilAlerte);
                    break;
                case 7:
                    printf("Entrez la nouvelle Date D'Entrée:\n");
                    scanf("%s", NvProduit.dateE);
                    break;
                case 8:
                    printf("Entrez la nouvelle Date De Sortie:\n");
                    scanf("%s", NvProduit.dateS);
                    break;
                default:
                    printf("Votre choix n'est pas valide!!!\n");
            }
            printf("Produit modifié!!!\n");
        }
    }
    
    if (!IDtrouver) {
        printf("Aucun produit trouvé avec l'ID fourni.\n");
    }
}

// Fonction pour trier les produits par ID
void TrierProduits(Produit *prod, int NombreProduit) {
    int i, j;
    Produit temp;
    
    for (i = 1; i < NombreProduit; i++) {
        temp = prod[i];
        j = i - 1;
        while (j >= 0 && prod[j].ID > temp.ID) {
            prod[j + 1] = prod[j];
            j--;
        }
        prod[j + 1] = temp;
    }
}

// Fonction pour rechercher un produit par nom
void RechercherParNom(Produit *prod, int NombreProduit, char *nomRecherche) {
    int i, trouve = 0;
    printf("Résultats de la recherche par nom \"%s\":\n", nomRecherche);
    for (i = 0; i < NombreProduit; i++) {
        if (strstr(prod[i].Nom, nomRecherche) != NULL) {
            printf("ID: %d, Nom: %s, Description: %s, Username: %s, Prix Unitaire: %.2f, Quantité Stock: %d, Seuil d'Alerte: %d, Date d'Entrée: %s, Date de Sortie: %s\n",
                   prod[i].ID, prod[i].Nom, prod[i].Description, prod[i].Username, prod[i].PrixUnitaire, prod[i].QuantiteStock, prod[i].SeuilAlerte, prod[i].dateE, prod[i].dateS);
            trouve = 1;
        }
    }
    if (!trouve) {
        printf("Aucun produit trouvé avec le nom \"%s\".\n", nomRecherche);
    }
}

// Fonction pour rechercher un produit par nom d'utilisateur
void RechercherParUtilisateur(Produit *prod, int NombreProduit, char *utilisateurRecherche) {
    int i, trouve = 0;
    printf("Résultats de la recherche par nom d'utilisateur \"%s\":\n", utilisateurRecherche);
    for (i = 0; i < NombreProduit; i++) {
        if (strstr(prod[i].Username, utilisateurRecherche) != NULL) {
            printf("ID: %d, Nom: %s, Description: %s, Username: %s, Prix Unitaire: %.2f, Quantité Stock: %d, Seuil d'Alerte: %d, Date d'Entrée: %s, Date de Sortie: %s\n",
                   prod[i].ID, prod[i].Nom, prod[i].Description, prod[i].Username, prod[i].PrixUnitaire, prod[i].QuantiteStock, prod[i].SeuilAlerte, prod[i].dateE, prod[i].dateS);
            trouve = 1;
        }
    }
    if (!trouve) {
        printf("Aucun produit trouvé avec le nom d'utilisateur \"%s\".\n", utilisateurRecherche);
    }
}

// Fonction pour stocker les informations des produits dans un fichier texte
void StockerProduitsTXT(Produit *prod, int NombreProduit) {
    FILE *txtFile = fopen("products.txt", "w");
    int i;
    if (txtFile == NULL) {
        printf("Erreur lors de l'ouverture du fichier 'products.txt'.\n");
        return;
    }
    fprintf(txtFile, "ID, Nom, Description, Nom Utilisateur, Prix unitaire, Quantité en stock, Seuil d'alerte de stock, Date de dernière entrée en stock, Date de dernière sortie de stock\n");
    for ( i = 0; i < NombreProduit; i++) {
        fprintf(txtFile, "%d, %s, %s, %s, %.2f, %d, %d, %s, %s\n", prod[i].ID, prod[i].Nom, prod[i].Description,
                prod[i].Username, prod[i].PrixUnitaire, prod[i].QuantiteStock, prod[i].SeuilAlerte,
                prod[i].dateE, prod[i].dateS);
    }
    fclose(txtFile);
    printf("Les informations des produits ont été stockées dans le fichier 'products.txt' avec succès.\n");
}

int main() {
    FILE *file = fopen("products.txt", "a+");
    if (file == NULL) {
        printf("Erreur lors de l'ouverture du fichier.\n");
        return 1;
    }
    Produit *prod = malloc(100 * sizeof(Produit));
    if (prod == NULL) {
        printf("Erreur d'allocation de mémoire.\n");
        fclose(file);
        return 1;
    }
    int NombreProduit = 0, choix, ID;
    char Nom[30];
    EntrerNom(Nom);
    do {
        printf("Opérations disponibles :\n");
        printf("1. Ajouter un produit\n");
        printf("2. Supprimer un produit\n");
        printf("3. Modifier un produit\n");
        printf("4. Afficher la liste des produits\n");
        printf("5. Rechercher un produit par nom\n");
        printf("6. Rechercher un produit par nom d'utilisateur\n");
        printf("7. Trier des produits par ID\n");
        printf("8. Quitter le programme\n");
        printf("Votre choix : ");
        scanf("%d", &choix);
        switch (choix) {
            case 1:
                AjoutProduit(file, prod, &NombreProduit);
                break;
            case 2:
                SupprimerProduit(prod, &NombreProduit);
                break;
            case 3:
                ModifierProduit(prod, &NombreProduit, ID);
                break;
            case 4:
                AfficherProduits(file);
                break;
            case 5:
                printf("Entrez le nom du produit à rechercher : ");
                scanf("%s", Nom);
                RechercherParNom(prod, NombreProduit, Nom);
                break;
            case 6:
                printf("Entrez le nom d'utilisateur à rechercher : ");
                scanf("%s", Nom);
                RechercherParUtilisateur(prod, NombreProduit, Nom);
                break;
            case 7:
                TrierProduits(prod, NombreProduit);
                AfficherProduits(file);
                break;
            case 8:
                printf("Programme terminé.\n");
                break;
            default:
                printf("Choix invalide.\n");
        }
    } while (choix != 8);
    StockerProduitsTXT(prod, NombreProduit);
    free(prod);
    fclose(file);
    return 0;
}
